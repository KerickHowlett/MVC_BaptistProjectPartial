@model MVC_DATABASE.Models.ViewModels.CreateContract

@section Scripts {

    <script type="text/jscript">
        $(function(){
            $("#contract_RFPID").on("change", function (e) {
                var dropValue = $(this).val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetAcceptedVendors", "CONTRACTs")",
                    data: {
                        RFPID: dropValue
                    },
                    datatype: 'JSON',
                    contentType: "application/json"
                })
                    .done(OnSuccessPopulateListBox)
                    .fail(function (data) { showError(data); });
            });

            function OnSuccessPopulateListBox(data) {
                $("#contract_Id").empty()
                data.forEach(function (vendor) {
                    $("#contract_Id").append('<option value =' + vendor.Id + '>' + vendor.ORGANIZATION + '</option>')
                });
                $("#contract_Id").show()
                //debugger;
            }
            function showError(data) {
                debugger;
            }
        });
    </script>
}

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "CONTRACTs", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CONTRACT</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.contract.RFPID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.contract.RFPID, new SelectList(ViewBag.rfpid), new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.contract.RFPID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.contract.TEMPLATEID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.contract.TEMPLATEID, (SelectList)ViewBag.templates, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.contract.TEMPLATEID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.contract.Id, "Id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
            @if (ViewBag.AcceptedVendors != null)
            {
                @Html.DropDownListFor(model => model.contract.Id, new SelectList(ViewBag.AcceptedVendors))
                @Html.ValidationMessageFor(model => model.contract.Id, "", new { @class = "text-danger" })
            }
            </div>
        </div>

        @Html.HiddenFor(model => model.contract.CONTRACT_PATH, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
       
     
            <div class="form-group">
                @Html.LabelFor(m => m.contract.DOCUMENTPATH, "Document Path", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.file, null, new { type = "file", @class = "input-file" })
                    @*<input type="file" name="file" />*@
                </div>
                </div>


                <div class="form-group">

                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>

          
           
        </div>
     
   
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
